" The default leader is '\', but many people prefer ','
let mapleader = ','

" The default mappings for editing and applying the  configuration
let g:apply_config_mapping='<leader>sv'
let g:edit_config_mapping='<leader>ev'

" Initialize directories
set backup
function! InitializeDirectories()
    let parent = $HOME
    let prefix = 'vim'
    let dir_list = {
                \ 'backup': 'backupdir',
                \ 'views': 'viewdir',
                \ 'swap': 'directory' }

    if has('persistent_undo')
        let dir_list['undo'] = 'undodir'
        set undofile                " So is persistent undo ...
        set undolevels=1000         " Maximum number of changes that can be undone
        set undoreload=10000        " Maximum number lines to save for undo on a buffer reload
    endif

    " To specify a different directory in which to place the vimbackup,
    if exists('g:consolidated_directory')
        let common_dir = g:consolidated_directory . prefix
    else
        let common_dir = parent . '/.' . prefix
    endif

    for [dirname, settingname] in items(dir_list)
        let directory = common_dir . dirname . '/'
        if exists("*mkdir")
            if !isdirectory(directory)
                call mkdir(directory)
            endif
        endif
        if !isdirectory(directory)
            echo "Warning: Unable to create backup directory: " . directory
            echo "Try: mkdir -p " . directory
        else
            let directory = substitute(directory, " ", "\\\\ ", "g")
            exec "set " . settingname . "=" . directory
        endif
    endfor
endfunction
call InitializeDirectories()



" let g:no_autochdir =
" let g:bundle_groups =
" let g:clear_search_highlight =
" let g:consolidated_directory = <full path to desired directory>
" let g:edit_config_mapping =
" let g:no_easyWindows = 1
" let g:no_keyfixes =
" let g:no_neosnippet_expand =
" let g:no_restore_cursor =
" let g:no_views =
" let g:no_wrapRelMotion =

