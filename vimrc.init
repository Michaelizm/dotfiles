" The default leader is '\', but many people prefer ','
" let mapleader = ','
let mapleader = "\<Space>"

" The default mappings for editing and applying the configuration
let g:apply_config='<leader>sv'
let g:edit_config='<leader>ev'

map <leader>pi :PlugInstall<CR>
map <leader>pd :PlugUpdate<CR>
map <leader>pg :PlugUpgrade<CR>

" Initialize directories
set backup

function! InitializeDirectories()
    let parent = $HOME
    let prefix = 'vim'
    let dir_list = {
                \ 'backup': 'backupdir',
                \ 'views': 'viewdir',
                \ 'swap': 'directory' }

    if has('persistent_undo')
        let dir_list['undo'] = 'undodir'
        set undofile                " So is persistent undo ...
        set undolevels=1000         " Maximum number of changes that can be undone
        set undoreload=10000        " Maximum number lines to save for undo on a buffer reload
    endif

    let common_dir = parent . '/.' . prefix

    for [dirname, settingname] in items(dir_list)
        let directory = common_dir . dirname . '/'
        if exists("*mkdir")
            if !isdirectory(directory)
                call mkdir(directory)
            endif
        endif
        if !isdirectory(directory)
            echo "Warning: Unable to create backup directory: " . directory
            echo "Try: mkdir -p " . directory
        else
            let directory = substitute(directory, " ", "\\\\ ", "g")
            exec "set " . settingname . "=" . directory
        endif
    endfor
endfunction
call InitializeDirectories()

" Restore cursor
function! ResCur()
    if line("'\"") <= line("$")
        silent! normal! g`"
        return 1
    endif
endfunction

augroup resCur
    autocmd!
    autocmd BufWinEnter * call ResCur()
augroup END

" Functions
function! s:ExpandFilenameAndExecute(command, file)
    execute a:command . " " . expand(a:file, ":p")
endfunction

function! s:EditConfig()
    call <SID>ExpandFilenameAndExecute("tabedit", "~/.vimrc.init")
    call <SID>ExpandFilenameAndExecute("tabedit", "~/.vimrc")
    call <SID>ExpandFilenameAndExecute("vsplit", "~/.vimrc.bundles")
    execute bufwinnr(".vimrc") . "wincmd w"
endfunction

execute "noremap " . g:edit_config . " :call <SID>EditConfig()<CR>"
execute "noremap " . g:apply_config . " :source ~/.vimrc<CR>".":filetype detect<CR>:exe \":echo \'vimrc reloaded\'\"<CR>"

