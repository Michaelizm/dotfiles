set nocompatible        " Must be first line
set background=dark     " Assume a dark background

" Function {
    function! DoRemote(arg)
      UpdateRemotePlugins
    endfunction

    function! BuildYCM(info)
      " info is a dictionary with 3 fields
      " - name:   name of the plugin
      " - status: 'installed', 'updated', or 'unchanged'
      " - force:  set on PlugInstall! or PlugUpdate!
      if a:info.status == 'updated' || a:info.force
        !./install.py
      endif
    endfunction
" }

filetype off
call plug#begin('~/.vim/bundle')

" Deps {
    Plug 'MarcWeber/vim-addon-mw-utils'
    Plug 'tomtom/tlib_vim'
    if executable('ag')
        Plug 'mileszs/ack.vim'
        let g:ackprg = 'ag --nogroup --nocolor --column --smart-case'
    elseif executable('ack-grep')
        let g:ackprg="ack-grep -H --nocolor --nogroup --column"
        Plug 'mileszs/ack.vim'
    elseif executable('ack')
        Plug 'mileszs/ack.vim'
    endif
" }

" list only the plugin groups you will use
if !exists('g:bundle_groups')
    let g:bundle_groups = [
                          \ 'general',
                          \ 'Misc',
                          \ 'youcompleteme',
                          \ 'programming',
                          \ 'python',
                          \ 'mine',]
endif

" To override all the included bundles, add the following to your
if !exists("g:override_bundles")

" Mine {
    if count(g:bundle_groups, 'mine')
        Plug 'morhetz/gruvbox'
        Plug 'rizzatti/dash.vim'
            nmap <silent> <leader>d <Plug>DashSearch
        Plug 'rust-lang/rust.vim'
    endif
" }

" General {
    if count(g:bundle_groups, 'general')
        Plug 'scrooloose/nerdtree'
            " Initialize NERDTree as needed
            let g:NERDSpaceDelims=1
            function! NERDTreeInitAsNeeded()
                redir => bufoutput
                buffers!
                redir END
                let idx = stridx(bufoutput, "NERD_tree")
                if idx > -1
                    NERDTreeMirror
                    NERDTreeFind
                    wincmd l
                endif
            endfunction

            let g:NERDShutUp=1
            map <C-e> <plug>NERDTreeTabsToggle<CR>
            map <leader>e :NERDTreeFind<CR>
            nmap <leader>nt :NERDTreeFind<CR>
            let NERDTreeShowBookmarks=1
            let NERDTreeIgnore=['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$']
            let NERDTreeChDirMode=0
            let NERDTreeQuitOnOpen=1
            let NERDTreeMouseMode=2
            let NERDTreeShowHidden=1
            let NERDTreeKeepTreeInNewTab=1
            let g:nerdtree_tabs_open_on_gui_startup=0
        Plug 'altercation/vim-colors-solarized'
        Plug 'spf13/vim-colors'
        Plug 'tpope/vim-surround'
        Plug 'tpope/vim-repeat'
        Plug 'rhysd/conflict-marker.vim'
        Plug 'jiangmiao/auto-pairs'
        Plug 'ctrlpvim/ctrlp.vim'
        Plug 'tacahiroy/ctrlp-funky'
            let g:ctrlp_match_window = 'order:ttb,max:20'
            let g:ctrlp_working_path_mode = 'ra'
            nnoremap <silent> <D-t> :CtrlP<CR>
            nnoremap <silent> <D-r> :CtrlPMRU<CR>
            let g:ctrlp_custom_ignore = {
                \ 'dir':  '\.git$\|\.hg$\|\.svn$',
                \ 'file': '\.exe$\|\.so$\|\.dll$\|\.pyc$' }
            if executable('ag')
                let s:ctrlp_fallback = 'ag %s --nocolor -l -g ""'
            elseif executable('ack-grep')
                let s:ctrlp_fallback = 'ack-grep %s --nocolor -f'
            elseif executable('ack')
                let s:ctrlp_fallback = 'ack %s --nocolor -f'
            else
                let s:ctrlp_fallback = 'find %s -type f'
            endif
            if exists("g:ctrlp_user_command")
                unlet g:ctrlp_user_command
            endif
            let g:ctrlp_user_command = {
                \ 'types': {
                    \ 1: ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others'],
                    \ 2: ['.hg', 'hg --cwd %s locate -I .'],
                \ },
                \ 'fallback': s:ctrlp_fallback
            \ }
            let g:ctrlp_extensions = ['funky']
            nnoremap <Leader>fu :CtrlPFunky<Cr>
        Plug 'terryma/vim-multiple-cursors'
        Plug 'vim-scripts/sessionman.vim'
            set sessionoptions=blank,buffers,curdir,folds,tabpages,winsize
            nmap <leader>sl :SessionList<CR>
            nmap <leader>ss :SessionSave<CR>
            nmap <leader>sc :SessionClose<CR>
        Plug 'matchit.zip'
            let b:match_ignorecase = 1
        Plug 'vim-airline/vim-airline'
        Plug 'vim-airline/vim-airline-themes'
        Plug 'powerline/fonts'
        Plug 'bling/vim-bufferline'
        Plug 'easymotion/vim-easymotion'
        Plug 'jistr/vim-nerdtree-tabs'
        Plug 'flazz/vim-colorschemes'
        Plug 'mbbill/undotree'
            nnoremap <Leader>u :UndotreeToggle<CR>
            " If undotree is opened, it is likely one wants to interact with it.
            let g:undotree_SetFocusWhenToggle=1
        Plug 'nathanaelkane/vim-indent-guides'
            let g:indent_guides_start_level = 2
            let g:indent_guides_guide_size = 1
            let g:indent_guides_enable_on_vim_startup = 1
        if !exists('g:no_views')
            Plug 'vim-scripts/restore_view.vim'
        endif
        Plug 'mhinz/vim-signify'
        Plug 'tpope/vim-abolish'
        Plug 'osyo-manga/vim-over'
        Plug 'kana/vim-textobj-user'
        Plug 'kana/vim-textobj-indent'
        Plug 'gcmt/wildfire.vim'
            let g:wildfire_objects = {
                        \ "*" : ["i'", 'i"', "i)", "i]", "i}", "ip"],
                        \ "html,xml" : ["at"],
                        \ }
    endif
" }

" Writing {
    if count(g:bundle_groups, 'writing')
        Plug 'reedes/vim-litecorrect'
        Plug 'reedes/vim-textobj-sentence'
            augroup textobj_sentence
              autocmd!
              autocmd FileType markdown call textobj#sentence#init()
              autocmd FileType textile call textobj#sentence#init()
              autocmd FileType text call textobj#sentence#init()
            augroup END
        Plug 'reedes/vim-textobj-quote'
            augroup textobj_quote
                autocmd!
                autocmd FileType markdown call textobj#quote#init()
                autocmd FileType textile call textobj#quote#init()
                autocmd FileType text call textobj#quote#init({'educate': 0})
            augroup END
        Plug 'reedes/vim-wordy'
    endif
" }

" Programming {
    if count(g:bundle_groups, 'programming')
        Plug 'scrooloose/syntastic'
        Plug 'tpope/vim-fugitive'
            " Instead of reverting the cursor to the last position in the buffer, we set it to the first line when editing a git commit message
            au FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])
            nnoremap <silent> <leader>gs :Gstatus<CR>
            nnoremap <silent> <leader>gd :Gdiff<CR>
            nnoremap <silent> <leader>gc :Gcommit<CR>
            nnoremap <silent> <leader>gb :Gblame<CR>
            nnoremap <silent> <leader>gl :Glog<CR>
            nnoremap <silent> <leader>gp :Git push<CR>
            nnoremap <silent> <leader>gr :Gread<CR>
            nnoremap <silent> <leader>gw :Gwrite<CR>
            nnoremap <silent> <leader>ge :Gedit<CR>
            nnoremap <silent> <leader>gi :Git add -p %<CR>
            nnoremap <silent> <leader>gg :SignifyToggle<CR>
        Plug 'mattn/webapi-vim'
        Plug 'mattn/gist-vim'
        Plug 'scrooloose/nerdcommenter'
        Plug 'tpope/vim-commentary'
        Plug 'godlygeek/tabular'
            nmap <Leader>a& :Tabularize /&<CR>
            vmap <Leader>a& :Tabularize /&<CR>
            nmap <Leader>a= :Tabularize /^[^=]*\zs=<CR>
            vmap <Leader>a= :Tabularize /^[^=]*\zs=<CR>
            nmap <Leader>a=> :Tabularize /=><CR>
            vmap <Leader>a=> :Tabularize /=><CR>
            nmap <Leader>a: :Tabularize /:<CR>
            vmap <Leader>a: :Tabularize /:<CR>
            nmap <Leader>a:: :Tabularize /:\zs<CR>
            vmap <Leader>a:: :Tabularize /:\zs<CR>
            nmap <Leader>a, :Tabularize /,<CR>
            vmap <Leader>a, :Tabularize /,<CR>
            nmap <Leader>a,, :Tabularize /,\zs<CR>
            vmap <Leader>a,, :Tabularize /,\zs<CR>
            nmap <Leader>a<Bar> :Tabularize /<Bar><CR>
            vmap <Leader>a<Bar> :Tabularize /<Bar><CR>
        if executable('ctags')
            Plug 'majutsushi/tagbar'
                nnoremap <silent> <leader>] :TagbarToggle<CR>
                set tags=./tags;/,~/.vimtags
                " Make tags placed in .git/tags file available in all levels of a repository
                let gitroot = substitute(system('git rev-parse --show-toplevel'), '[\n\r]', '', 'g')
                if gitroot != ''
                    let &tags = &tags . ',' . gitroot . '/.git/tags'
                endif
        endif
    endif
" }

" Snippets & AutoComplete {
    if  count(g:bundle_groups, 'youcompleteme')
        Plug 'Valloric/YouCompleteMe', { 'do': function('BuildYCM') }
            let g:acp_enableAtStartup = 0
            " enable completion from tags
            let g:ycm_collect_identifiers_from_tags_files = 1
            " remap Ultisnips for compatibility for YCM
            let g:UltiSnipsExpandTrigger = '<C-j>'
            let g:UltiSnipsJumpForwardTrigger = '<C-j>'
            let g:UltiSnipsJumpBackwardTrigger = '<C-k>'
            " Enable omni completion.
            autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
            autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
            autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
            autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
            autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
            autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
            autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc
            " For snippet_complete marker.
            if !exists("g:no_conceal")
                if has('conceal')
                    set conceallevel=2 concealcursor=i
                endif
            endif
            set completeopt-=preview
        Plug 'SirVer/ultisnips'
        Plug 'honza/vim-snippets'
    endif
" }

" Python {
    if count(g:bundle_groups, 'python')
        Plug 'klen/python-mode'
            if !has('python') && !has('python3')
                let g:pymode = 0
            endif
            let g:pymode_lint_checkers = ['pyflakes']
            let g:pymode_trim_whitespaces = 0
            let g:pymode_options = 0
            let g:pymode_rope = 0
        Plug 'yssource/python.vim'
        Plug 'python_match.vim'
        Plug 'pythoncomplete'
    endif
" }

" Javascript {
    if count(g:bundle_groups, 'javascript')
        Plug 'elzr/vim-json'
            nmap <leader>jt <Esc>:%!python -m json.tool<CR><Esc>:set filetype=json<CR>
            let g:vim_json_syntax_conceal = 0
        Plug 'groenewege/vim-less'
        Plug 'pangloss/vim-javascript'
        Plug 'briancollins/vim-jst'
        Plug 'kchmck/vim-coffee-script'
    endif
" }


" Ruby {
    if count(g:bundle_groups, 'ruby')
        Plug 'tpope/vim-rails'
        let g:rubycomplete_buffer_loading = 1
    endif
" }

" Puppet {
    if count(g:bundle_groups, 'puppet')
        Plug 'rodjek/vim-puppet'
    endif
" }

" Elixir {
    if count(g:bundle_groups, 'elixir')
        Plug 'elixir-lang/vim-elixir'
        Plug 'carlosgaldino/elixir-snippets'
        Plug 'mattreduce/vim-mix'
    endif
" }

" Misc {
    if count(g:bundle_groups, 'misc')
        Plug 'tpope/vim-markdown'
        Plug 'spf13/vim-preview'
        Plug 'tpope/vim-cucumber'
        Plug 'cespare/vim-toml'
        Plug 'quentindecock/vim-cucumber-align-pipes'
        Plug 'saltstack/salt-vim'
    endif
" }

endif

call plug#end()

